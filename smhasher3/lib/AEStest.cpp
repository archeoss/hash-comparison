/*
 * AES hashlib wrapper tests
 * Copyright (C) 2021-2022  Frank J. T. Wojcik
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 */
#include "Platform.h"
#include "AES.h"
#include "AES-portable.h"

// Test values from FIPS-197, except as noted
// https://csrc.nist.gov/files/pubs/fips/197/final/docs/fips-197.pdf

static const uint8_t key128[16] = {
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
};

static const uint8_t xekeys128[10][16] = {
    {
        0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1,
        0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05,
    },
    {
        0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43,
        0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f,
    },
    {
        0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e,
        0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b,
    },
    {
        0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f,
        0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00,
    },
    {
        0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87,
        0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc,
    },
    {
        0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd,
        0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd,
    },
    {
        0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3,
        0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f,
    },
    {
        0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2,
        0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f,
    },
    {
        0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21,
        0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e,
    },
    {
        0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89,
        0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6,
    },
};

// These values were computed
static const uint8_t xdkeys128[10][16] = {
    {
        0x0c, 0x7b, 0x5a, 0x63, 0x13, 0x19, 0xea, 0xfe,
        0xb0, 0x39, 0x88, 0x90, 0x66, 0x4c, 0xfb, 0xb4,
    },
    {
        0xdf, 0x7d, 0x92, 0x5a, 0x1f, 0x62, 0xb0, 0x9d,
        0xa3, 0x20, 0x62, 0x6e, 0xd6, 0x75, 0x73, 0x24,
    },
    {
        0x12, 0xc0, 0x76, 0x47, 0xc0, 0x1f, 0x22, 0xc7,
        0xbc, 0x42, 0xd2, 0xf3, 0x75, 0x55, 0x11, 0x4a,
    },
    {
        0x6e, 0xfc, 0xd8, 0x76, 0xd2, 0xdf, 0x54, 0x80,
        0x7c, 0x5d, 0xf0, 0x34, 0xc9, 0x17, 0xc3, 0xb9,
    },
    {
        0x6e, 0xa3, 0x0a, 0xfc, 0xbc, 0x23, 0x8c, 0xf6,
        0xae, 0x82, 0xa4, 0xb4, 0xb5, 0x4a, 0x33, 0x8d,
    },
    {
        0x90, 0x88, 0x44, 0x13, 0xd2, 0x80, 0x86, 0x0a,
        0x12, 0xa1, 0x28, 0x42, 0x1b, 0xc8, 0x97, 0x39,
    },
    {
        0x7c, 0x1f, 0x13, 0xf7, 0x42, 0x08, 0xc2, 0x19,
        0xc0, 0x21, 0xae, 0x48, 0x09, 0x69, 0xbf, 0x7b,
    },
    {
        0xcc, 0x75, 0x05, 0xeb, 0x3e, 0x17, 0xd1, 0xee,
        0x82, 0x29, 0x6c, 0x51, 0xc9, 0x48, 0x11, 0x33,
    },
    {
        0x2b, 0x37, 0x08, 0xa7, 0xf2, 0x62, 0xd4, 0x05,
        0xbc, 0x3e, 0xbd, 0xbf, 0x4b, 0x61, 0x7d, 0x62,
    },
    {
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
        0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
    },
};

static const uint8_t inp128[16] = {
    0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d,
    0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34,
};

static const uint8_t enc128a[16] = {
    0xa4, 0x9c, 0x7f, 0xf2, 0x68, 0x9f, 0x35, 0x2b,
    0x6b, 0x5b, 0xea, 0x43, 0x02, 0x6a, 0x50, 0x49,
};

static const uint8_t enc128b[16] = {
    0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb,
    0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32,
};

// These values were computed
static const uint8_t dec128a[16] = {
    0x0e, 0xdd, 0xc8, 0xaf, 0xd3, 0xb8, 0x56, 0xdc,
    0x0d, 0xdf, 0x11, 0xbc, 0x74, 0x8e, 0xe8, 0x2d,
};

static inline bool VERIFY( const uint8_t * a, const uint8_t * b, size_t len ) {
    if (memcmp(a, b, len) == 0) {
        return true;
    }
    printf("\nFOUND:   ");
    for (size_t i = 0; i < len; i++) {
        printf(" %02x", a[i]);
    }
    printf("\nEXPECTED:");
    for (size_t i = 0; i < len; i++) {
        printf(" %02x", b[i]);
    }
    printf("\n");

    return false;
}

void TestAESWrappers( void ) {
    uint8_t round_keys[44 * 4];
    uint8_t output[16];
    bool    result = true;

    // Platform-specific implementation tests

    AES_KeySetup_Enc(round_keys, key128, 128);
    for (unsigned i = 0; i < 10; i++) {
        result &= VERIFY(&round_keys[(i + 1) * 16], &xekeys128[i][0], 16);
    }

    memcpy(output, inp128, 16);
    for (unsigned i = 0; i < 16; i++) {
        output[i] ^= round_keys[i];
    }
    AES_EncryptRound(&round_keys[16], output);
    result &= VERIFY(output, enc128a, 16);

    memcpy(output, inp128, 16);
    AES_Encrypt<10>(round_keys, output, output);
    result &= VERIFY(output, enc128b, 16);


    AES_KeySetup_Dec(round_keys, key128, 128);
    for (unsigned i = 0; i < 10; i++) {
        result &= VERIFY(&round_keys[(i + 1) * 16], &xdkeys128[i][0], 16);
    }

    memcpy(output, inp128, 16);
    for (unsigned i = 0; i < 16; i++) {
        output[i] ^= round_keys[i + 16];
    }
    AES_DecryptRound(&round_keys[0], output);
    result &= VERIFY(output, dec128a, 16);

    memcpy(output, enc128b, 16);
    AES_Decrypt<10>(round_keys, output, output);
    result &= VERIFY(output, inp128, 16);


    // Platform-independent implementation tests

    AES_KeySetup_Enc_portable(round_keys, key128, 128);
    for (unsigned i = 0; i < 10; i++) {
        result &= VERIFY(&round_keys[(i + 1) * 16], &xekeys128[i][0], 16);
    }

    memcpy(output, inp128, 16);
    for (unsigned i = 0; i < 16; i++) {
        output[i] ^= round_keys[i];
    }
    AES_EncryptRound_portable(&round_keys[16], output);
    result &= VERIFY(output, enc128a, 16);

    memcpy(output, inp128, 16);
    AES_Encrypt_portable<10>(round_keys, output, output);
    result &= VERIFY(output, enc128b, 16);


    AES_KeySetup_Dec_portable(round_keys, key128, 128);
    for (unsigned i = 0; i < 10; i++) {
        result &= VERIFY(&round_keys[(i + 1) * 16], &xdkeys128[i][0], 16);
    }

    memcpy(output, inp128, 16);
    for (unsigned i = 0; i < 16; i++) {
        output[i] ^= round_keys[i + 16];
    }
    AES_DecryptRound_portable(&round_keys[0], output);
    result &= VERIFY(output, dec128a, 16);

    memcpy(output, enc128b, 16);
    AES_Decrypt_portable<10>(round_keys, output, output);
    result &= VERIFY(output, inp128, 16);

    if (!result) {
        printf("AES self-test failed!\n");
        exit(1);
    }

    printf("AES self-test passed.\n");
}
